{"version":3,"sources":["../../src/utils/cache-helpers.js"],"names":["createRegExp","search","RegExp","replace","isFresh","entry","nowDefault","now","Date","created","TTL","isWaiting","waiting","waitUntil","waitingForError","key","wait","Error","JSON","stringify","createEntry","value","createWait","started","createObservable","promise","timeout","fromPromise"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AAEO,MAAMA,sCAAgBC,MAAD,IAAY;AACtC,SAAO,IAAIC,MAAJ,CAAWD,OACfE,OADe,CACP,KADO,EACA,KADA,EAEfA,OAFe,CAEP,KAFO,EAEA,KAFA,EAGfA,OAHe,CAGP,KAHO,EAGA,KAHA,EAIfA,OAJe,CAIP,KAJO,EAIA,KAJA,EAKfA,OALe,CAKP,KALO,EAKA,KALA,EAMfA,OANe,CAMP,KANO,EAMA,KANA,EAOfA,OAPe,CAOP,KAPO,EAOA,IAPA,CAAX,CAAP;AAQD,CATM,C,CAPP;;;AAkBO,MAAMC,4BAAU,CAACC,KAAD,EAAQC,UAAR,KAAuB;AAC5C,QAAMC,MAAMD,cAAcE,KAAKD,GAAL,EAA1B;AACA,SAAOF,MAAMI,OAAN,GAAgBJ,MAAMK,GAAtB,GAA4BH,GAAnC;AACD,CAHM;;AAKA,MAAMI,gCAAY,CAACC,OAAD,EAAUN,UAAV,KAAyB;AAChD,QAAMC,MAAMD,cAAcE,KAAKD,GAAL,EAA1B;AACA,MAAIK,OAAJ,EAAa;AACX,WAAOA,QAAQC,SAAR,GAAoBN,GAA3B;AACD;AACD,SAAO,KAAP;AACD,CANM;;AAQP;;;;;;;;;;;;;;;;;;;;;;AAsBO,MAAMO,4CAAkB,CAACC,GAAD,EAAMC,OAAO,EAAb,KAAoB;AACjD,SAAO,IAAIC,KAAJ,CAAW,4BAA2BF,GAAI,WAAUG,KAAKC,SAAL,CAAeH,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAA8B,EAAlF,CAAP;AACD,CAFM;;AAIA,MAAMI,oCAAc,CAACC,KAAD,EAAQX,GAAR,KAAgB;AACzC,SAAO;AACLD,aAASD,KAAKD,GAAL,EADJ;AAELG,OAFK;AAGLW;AAHK,GAAP;AAKD,CANM;;AAQA,MAAMC,kCAAa,CAACN,IAAD,EAAOT,GAAP,KAAe;AACvC,QAAMgB,UAAUhB,OAAOC,KAAKD,GAAL,EAAvB;AACA,SAAO;AACLgB,WADK;AAELP,QAFK;AAGLH,eAAWU,UAAUP;AAHhB,GAAP;AAKD,CAPM;;AASA,MAAMQ,8CAAmB,CAACC,OAAD,EAAUC,OAAV,KAAsB;AACpD,SAAO,uBACJC,WADI,CACQF,SADR,EAEJC,OAFI,CAEIA,OAFJ,CAAP;AAGD,CAJM","file":"cache-helpers.js","sourcesContent":["/**\n * @module\n **/\nimport {Observable} from 'rxjs/Observable'\nimport 'rxjs/add/observable/fromPromise'\nimport 'rxjs/add/operator/timeout'\n\nexport const createRegExp = (search) => {\n  return new RegExp(search\n    .replace(/\\./g, '\\\\.')\n    .replace(/\\[/g, '\\\\[')\n    .replace(/\\]/g, '\\\\]')\n    .replace(/\\^/g, '\\\\^')\n    .replace(/\\$/g, '\\\\$')\n    .replace(/\\?/g, '\\\\?')\n    .replace(/\\*/g, '.*'))\n}\n\nexport const isFresh = (entry, nowDefault) => {\n  const now = nowDefault || Date.now()\n  return entry.created + entry.TTL > now\n}\n\nexport const isWaiting = (waiting, nowDefault) => {\n  const now = nowDefault || Date.now()\n  if (waiting) {\n    return waiting.waitUntil > now\n  }\n  return false\n}\n\n/*\nexport const existsAndNotStale = (entry, wait, nowDefault) => {\n  const now = nowDefault || Date.now()\n\n  let remainingToWait = 0\n  if (wait) {\n    remainingToWait = wait.started + wait.wait - now\n  }\n  if (remainingToWait > 0) {\n    return true\n  }\n  if (entry) {\n    return entry.created + entry.TTL > now\n  }\n  return false\n}\n\nexport const finishedWaiting = (waiting) => {\n  return waiting ? waiting.waitUntil < Date.now() : true\n}\n*/\n\nexport const waitingForError = (key, wait = {}) => {\n  return new Error(`Waiting for next run for ${key}, wait: ${JSON.stringify(wait, null, 2)}`)\n}\n\nexport const createEntry = (value, TTL) => {\n  return {\n    created: Date.now(),\n    TTL,\n    value\n  }\n}\n\nexport const createWait = (wait, now) => {\n  const started = now || Date.now()\n  return {\n    started,\n    wait,\n    waitUntil: started + wait\n  }\n}\n\nexport const createObservable = (promise, timeout) => {\n  return Observable\n    .fromPromise(promise())\n    .timeout(timeout)\n}\n"]}