{"version":3,"sources":["../../../src/persistence/_spec/index.spec.js"],"names":["utils","describe","it","cache","log","use","bootload","to","be","an","Object","initial","hello","info","debug","extraData","equal","mockFactory","setSpy","beforeEach","p","key","json","ex","ttl","cb","indexOf","Error","spy","stub","resolves","name","set","doNotPersist","keySpace","grace","afterEach","destroy","loadObjects","restore","Promise","resolve","now","Date","get","worker","then","obj","called","value","redisKey","expire","args","parsed","JSON","parse","contain","have","keys","callCount","warn","delSpy","del","maxLength","hei","getRedisKey","done","count","error","setTimeout","catch","clear","deleteKeys"],"mappings":"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","file":"index.spec.js","sourcesContent":["import persistentCache from '../'\nimport inMemoryCache from '../../'\nimport sinon from 'sinon'\nimport expect from 'expect.js'\nimport {mockRedisFactory} from '../../utils/mock-redis-factory'\nimport * as utils from '../persistence-helpers'\nimport {dummyLog} from '../../utils/log-helper'\nimport pkg from '../../../package.json'\n\ndescribe('persistence', () => {\n  describe('-> istantiation', () => {\n    it('should be possible', () => {\n      const cache = inMemoryCache({log: dummyLog})\n      cache.use(persistentCache(mockRedisFactory(), {bootload: false}))\n      expect(cache).to.be.an(Object)\n    })\n  })\n\n  describe('debug', () => {\n    it('should print a debug of the cache with extra options', () => {\n      // more thorough testing of debug in debug.spec.js\n      const cache = inMemoryCache({initial: {hello: 'world'}})\n      cache.use(persistentCache(mockRedisFactory(), {bootload: false}))\n      const info = cache.debug({extraData: 'values'})\n      expect(info.extraData).to.equal('values')\n    })\n  })\n\n  describe('-> get (write to redis on MISS)', () => {\n    let cache\n    let mockFactory\n    let setSpy\n\n    beforeEach(() => {\n      const p = (key, json, ex, ttl, cb) => {\n        if (key.indexOf('setFail') > -1) {\n          return cb(new Error('dummyerror'), null)\n        }\n        cb(null, 'ok')\n      }\n      setSpy = sinon.spy(p)\n      sinon.stub(utils, 'loadObjects').resolves({\n        [`${pkg.name}-myCache-house/1`]: '{\"hello\": \"world\"}'\n      })\n      mockFactory = mockRedisFactory({\n        set: setSpy\n      })\n      cache = inMemoryCache({log: dummyLog})\n      cache.use(persistentCache(\n        mockFactory,\n        {\n          doNotPersist: /store/,\n          keySpace: 'myCache',\n          grace: 1000\n        }\n      ))\n    })\n\n    afterEach(() => {\n      cache.destroy()\n      utils.loadObjects.restore()\n    })\n\n    it('should write to redis when a cache miss occurs', () => {\n      const spy = sinon.spy(() => Promise.resolve('hei'))\n      const now = Date.now()\n      const key = `key${now}`\n      return cache.get(key, {ttl: 1000, worker: spy}).then((obj) => {\n        expect(spy.called).to.equal(true)\n        expect(obj.value).to.equal('hei')\n        expect(obj.cache).to.equal('miss')\n        const [[redisKey, json, ex, expire]] = setSpy.args\n        const parsed = JSON.parse(json)\n        expect(redisKey).to.contain(key)\n        expect(parsed).to.have.keys(['created', 'TTL', 'value', 'cache'])\n        expect(ex).to.equal('ex')\n        expect(expire).to.equal(2)\n        expect(parsed.value).to.equal('hei')\n      })\n    })\n\n    it('should log a warning when write to redis fails (on cache miss)', () => {\n      const spy = sinon.spy(() => Promise.resolve('hei'))\n      const key = 'setFail'\n      const callCount = dummyLog.warn.callCount\n      return cache.get(key, {ttl: 1000, worker: spy}).then((obj) => {\n        expect(spy.called).to.equal(true)\n        expect(obj.value).to.equal('hei')\n        expect(obj.cache).to.equal('miss')\n        const [[redisKey, json, ex, expire]] = setSpy.args\n        const parsed = JSON.parse(json)\n        expect(redisKey).to.contain(key)\n        expect(parsed).to.have.keys(['created', 'TTL', 'value', 'cache'])\n        expect(ex).to.equal('ex')\n        expect(expire).to.equal(2)\n        expect(parsed.value).to.equal('hei')\n        expect(dummyLog.warn.callCount).to.equal(callCount + 1)\n      })\n    })\n\n    it('should not write to redis when a cache miss occurs and key matches ignored keys', () => {\n      const spy = sinon.spy(() => Promise.resolve('hei'))\n      const now = Date.now()\n      const key = `/store/${now}`\n      return cache.get(key, {worker: spy}).then((obj) => {\n        expect(spy.called).to.equal(true)\n        expect(obj.value).to.equal('hei')\n        expect(obj.cache).to.equal('miss')\n        expect(setSpy.called).to.equal(false)\n      })\n    })\n  })\n\n  describe('onDispose', () => {\n    let delSpy\n    let mockFactory\n    let cache\n\n    beforeEach(() => {\n      delSpy = sinon.spy((key, cb) => {\n        if (key.indexOf('house/1') > -1) {\n          return cb(null, 'ok')\n        }\n        cb(new Error('dummyerror'), null)\n      })\n      mockFactory = mockRedisFactory({\n        del: delSpy\n      })\n      cache = inMemoryCache({log: dummyLog, maxLength: 2})\n      cache.use(persistentCache(\n        mockFactory,\n        {\n          doNotPersist: /store/,\n          bootload: false,\n          keySpace: 'myCache',\n          grace: 1000\n        }\n      ))\n    })\n\n    afterEach(() => {\n      cache.destroy()\n    })\n\n    it('should evict key from redis when lru cache evicts key', () => {\n      cache.set('house/1', {hei: 'verden'})\n      cache.set('house/2', {hei: 'verden'})\n      cache.set('guest/3', {hei: 'verden'})\n      expect(delSpy.called).to.equal(true)\n      expect(delSpy.args[0][0]).to.equal(utils.getRedisKey(`${pkg.name}-myCache`, 'house/1'))\n    })\n\n    it('should catch error in redis.del when lru cache evicts key', (done) => {\n      const count = dummyLog.error.callCount\n      cache.set('guest/3', {hei: 'verden'})\n      cache.set('house/1', {hei: 'verden'})\n      cache.set('house/2', {hei: 'verden'})\n      expect(delSpy.called).to.equal(true)\n      expect(delSpy.args[0][0]).to.equal(utils.getRedisKey(`${pkg.name}-myCache`, 'guest/3'))\n      setTimeout(() => {\n        expect(dummyLog.error.callCount).to.equal(count + 1)\n        done()\n      })\n    })\n  })\n\n  describe('-> del/clear', () => {\n    let delSpy\n    let cache\n\n    beforeEach(() => {\n      delSpy = sinon.spy((key, cb) => {\n        if (key.indexOf('house/1') > -1) {\n          return cb(null, 'ok')\n        }\n        cb(new Error('dummyerror'), null)\n      })\n      cache = inMemoryCache({log: dummyLog})\n      cache.use(persistentCache(mockRedisFactory({del: delSpy}), {bootload: false}))\n    })\n\n    it('should delete key from redis when a key is deleted from lru-cache', () => {\n      return cache.del('house/1').then(() => {\n        expect(delSpy.called).to.equal(true)\n      })\n    })\n\n    it('should throw an error key from redis when a key is deleted from lru-cache', () => {\n      return cache.del('key').catch(() => {\n        expect(delSpy.called).to.equal(true)\n      })\n    })\n\n    it('should delete all keys in redis with prefix', () => {\n      sinon.stub(utils, 'deleteKeys').resolves()\n      return cache.clear().then(() => {\n        expect(utils.deleteKeys.called).to.equal(true)\n        expect(utils.deleteKeys.args[0][0]).to.equal(`${pkg.name}-`)\n        utils.deleteKeys.restore()\n      })\n    })\n  })\n})\n"]}