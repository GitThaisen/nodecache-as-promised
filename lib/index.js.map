{"version":3,"sources":["../src/index.js"],"names":["distCache","persistentCache","DEFAULT_CACHE_EXPIRE","DEFAULT_DELTA_WAIT","DEFAULT_MAX_LENGTH","DEFAULT_MAX_AGE","CACHE_HIT","CACHE_MISS","CACHE_STALE","options","log","console","initial","maxLength","maxAge","disposers","jobs","Map","waiting","cache","max","dispose","key","value","forEach","disposer","addDisposer","cb","push","removeDisposer","filter","set","ttl","has","del","clear","reset","_createJob","worker","workerTimeout","deltaWait","observable","onNext","delete","onError","err","error","onComplete","subscribe","_requestFromCache","obj","get","Promise","resolve","reject","job","cacheType","config","keys","values","entries","vals","reduce","acc","i","expire","search","test","debug","extraData","Object","buildFacade","facade","use","middleware","m","prevFacade","args","concat","middlewareArgs"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @module\n * @description Main module for creating an in-memory cache. Extendable using redis-wrapper and redis-persistence-wrapper\n **/\nimport cloneDeep from 'lodash/cloneDeep'\nimport {\n  // existsAndNotStale,\n  createEntry,\n  createObservable,\n  createWait,\n  createRegExp,\n  waitingForError,\n  isFresh,\n  isWaiting\n} from './utils/cache-helpers'\nimport {\n  getCacheInfo\n} from './utils/debug'\nimport lruCache from 'lru-cache'\n\n// export plugins for convenience\nimport dc from './dist-expire'\nimport pc from './persistence'\n\nexport const distCache = dc\nexport const persistentCache = pc\n\nconst DEFAULT_CACHE_EXPIRE = 24 * 60 * 60 * 1000\nconst DEFAULT_DELTA_WAIT = 10000\nconst DEFAULT_MAX_LENGTH = 1000\n// max stale period\nconst DEFAULT_MAX_AGE = 2 * DEFAULT_CACHE_EXPIRE\n\nconst CACHE_HIT = 'hit'\nconst CACHE_MISS = 'miss'\nconst CACHE_STALE = 'stale'\n\n/**\n * Wrapper around LRU-cache,\n * able to set values from promises\n * in get-operations\n **/\n\n /**\n  * @description Creates a new in-memory cache.\n  * @param {Object} options - an options object.\n  * @param {function} options.log - logger interface. Expects standard methods: info, warn, error, debug, trace\n  * @param {Object} options.initial - initial state, key/value based.\n  * @param {number} options.maxLength - max LRU-size (object count)\n  * @param {number} options.maxAge - max LRU-age (UX timestamp)\n  * @returns {Object} facade\n  * @returns {function} object.get method\n  * @returns {function} object.set method\n  * @returns {function} object.expire method\n  * @returns {function} object.debug method\n  **/\nexport default (options) => {\n  const {\n    log = console,  // eslint-disable-line\n    initial = {},\n    maxLength = DEFAULT_MAX_LENGTH,\n    maxAge = DEFAULT_MAX_AGE\n  } = options\n\n  let disposers = []\n  const jobs = new Map()\n  const waiting = new Map()\n  const cache = lruCache({\n    max: maxLength,\n    maxAge,\n    dispose: (key, value) => {\n      disposers.forEach((disposer) => disposer(key, value))\n    }\n  })\n\n  /**\n   * @description add a callback to lruCache#dispose\n   * @access public\n   * @param {function} callback - a function to be called when a cache key is evicted\n   * @returns {undefined}\n   **/\n  const addDisposer = (cb) => disposers.push(cb)\n\n  /**\n   * @description remove a callback from lruCache#dispose\n   * @access public\n   * @param {function} callback - a function to be called when a cache key is evicted\n   * @returns {undefined}\n   **/\n  const removeDisposer = (cb) => (disposers = disposers.filter((disposer) => disposer && disposer !== cb))\n\n  /**\n   * @description set value in cache\n   * @access public\n   * @param {String} key - key in cache to lookup.\n   * @param {any} value - value to store in cache\n   * @param {number} ttl - ttl (in ms) before cached object becomes stale.\n   * @returns {undefined}\n   **/\n  const set = (key, value, ttl = DEFAULT_CACHE_EXPIRE) => {\n    cache.set(key, {...createEntry(value, ttl), cache: CACHE_HIT})\n  }\n\n  /**\n   * @description check if key exists in cache\n   * @access public\n   * @param {String} key - key in cache to lookup.\n   * @returns {Boolean} - true|false key exists in cache\n   **/\n  const has = (key) => {\n    return cache.has(key)\n  }\n\n  /**\n   * @description delete key from cache\n   * @access public\n   * @param {String} key - key in cache to delete\n   * @returns {undefined}\n   **/\n  const del = (key) => {\n    cache.del(key)\n  }\n\n  /**\n   * @description removes all cache entries\n   * @access public\n   * @returns {undefined}\n   **/\n  const clear = () => {\n    cache.reset()\n  }\n\n  /**\n   * @description Create a job that subscribes to a rxJs-worker\n   * @access private\n   * @param {Object} options - an options object.\n   * @param {String} options.key - key to create worker for.\n   * @param {function} options.worker - function wrapper that returns a promise to fill cache object.\n   * @param {number} workertimeout - max time allowed to run promise.\n   * @param {number} ttl - ttl (in ms) before cached object becomes stale.\n   * @param {number} deltaWait - delta wait (in ms) before retrying promise.\n   * @returns {undefined}\n   **/\n  const _createJob = ({key, worker, workerTimeout, ttl, deltaWait}) => {\n    const observable = createObservable(worker, workerTimeout)\n    const onNext = (value) => {\n      // update cache\n      set(key, value, ttl)\n      waiting.delete(key)\n      jobs.delete(key)\n    }\n    const onError = (err) => {\n      // handle error\n      log.error(err)\n      waiting.set(key, createWait(deltaWait))\n      jobs.delete(key)\n    }\n    const onComplete = () => {\n      jobs.delete(key)\n    }\n    observable.subscribe(onNext, onError, onComplete)\n    return observable\n  }\n\n  /**\n   * @description Read from cache, check if stale, run promise (in a dedicated worker) or wait for other worker to complete\n   * @access private\n   * @param {Object} options - an options object.\n   * @param {function} options.worker - function wrapper that returns a promise to fill cache object.\n   * @param {String} options.key - key to create worker for.\n   * @param {number} workertimeout - max time allowed to run promise.\n   * @param {number} ttl - ttl (in ms) before cached object becomes stale.\n   * @param {number} deltaWait - delta wait (in ms) before retrying promise, when stale.\n   * @returns {Promise} resolves/rejects when request operation finishes\n   **/\n  const _requestFromCache = ({worker, key, workerTimeout, ttl, deltaWait}) => {\n    const obj = cache.get(key)\n    if (!worker) {\n      return (obj && isFresh(obj) && obj) ||\n              (obj && {...obj, cache: CACHE_STALE}) ||\n              null\n    } if (obj && isFresh(obj) && !waiting.get(key)) {\n      return Promise.resolve(obj)\n    } else if (obj && (!worker || isWaiting(waiting.get(key)))) {\n      return Promise.resolve({...obj, cache: CACHE_STALE})\n    } else if (isWaiting(waiting.get(key))) {\n      return Promise.reject(waitingForError(key, waiting.get(key)))\n    }\n\n    return new Promise((resolve, reject) => {\n      let job = jobs.get(key)\n      let cacheType = CACHE_HIT\n      if (!job) {\n        cacheType = CACHE_MISS\n        job = _createJob({\n          key,\n          worker,\n          workerTimeout,\n          ttl,\n          deltaWait\n        })\n        jobs.set(key, job)\n      }\n      job.subscribe((value) => {\n        resolve({value, cache: cacheType})\n      }, (err) => {\n        // serve stale object if it exists\n        obj ? resolve({...obj, cache: CACHE_STALE}) : reject(err)\n      })\n    })\n  }\n\n  /**\n   * @description get key from cache (or run promise to fill)\n   * @access public\n   * @param {String} key - key in cache to lookup.\n   * @param {Object} config - (optional) an options object.\n   * @param {number} config.ttl - ttl (in ms) before cached object becomes stale.\n   * @param {number} config.workerTimeout - max time allowed to run promise.\n   * @param {number} config.deltaWait - delta wait (in ms) before retrying promise, when stale.\n   * @param {function} config.worker - function wrapper that returns a promise to fill cache object.\n   * @returns {Promise} resolves/rejects when request operation finishes\n   **/\n  const get = (key, config = {}) => {\n    // TODO: support stale-while-revalidate\n    const {\n      ttl = DEFAULT_CACHE_EXPIRE,\n      workerTimeout = 5000,\n      deltaWait = DEFAULT_DELTA_WAIT,\n      worker\n    } = config\n    return _requestFromCache({\n      worker,\n      key,\n      workerTimeout,\n      ttl,\n      deltaWait\n    })\n  }\n\n  /**\n   * @description get keys from cache\n   * @access public\n   * @returns {Array<String>} - keys\n   **/\n  const keys = () => cache.keys()\n\n  /**\n   * @description get values from cache\n   * @access public\n   * @returns {Array<Any>} - values\n   **/\n  const values = () => cache.values()\n\n  /**\n   * @description get cache entries\n   * @access public\n   * @returns {Map<<String, Any>} - values\n   **/\n  const entries = () => {\n    const vals = values()\n    return new Map(keys().reduce((acc, key, i) => {\n      // console.log({[key]: vals[i]})\n      acc.push([key, vals[i]])\n      return acc\n    }, []))\n  }\n\n  /**\n   * @description expire a cache key (ie. set TTL = 0)\n   * @access public\n   * @param {Array<String>} keys - array of keys to expire (supports * as wildcards, converted to .* regexp)\n   * @returns {undefined}\n   **/\n  const expire = (keys) => {\n    keys.forEach((key) => {\n      const search = createRegExp(key);\n      [...cache.keys()]\n        .filter((key) => search.test(key))\n        .forEach((key) => {\n          const obj = cache.get(key)\n          set(key, obj.value, 0)  // TTL = 0\n          waiting.delete(key)\n        })\n    })\n  }\n\n  const debug = (extraData = {}) => {\n    return getCacheInfo({\n      maxAge,\n      maxLength,\n      ...options,\n      ...extraData,\n      cache,\n      waiting\n    })\n  }\n\n  Object.keys(initial).forEach((key) => {\n    set(key, cloneDeep(initial[key]))\n  })\n\n  const buildFacade = () => {\n    return {\n      get,\n      set,\n      has,\n      del,\n      keys,\n      values,\n      entries,\n      clear,\n      expire,\n      addDisposer,\n      removeDisposer,\n      // helpers\n      debug,\n      log,\n      // for testing purposes\n      waiting\n    }\n  }\n\n  const facade = buildFacade()\n\n  facade.use = (middleware) => {\n    const m = middleware(buildFacade())\n    Object.keys(m).forEach((key) => {\n      // Keep a reference to the original function pointer\n      const prevFacade = facade[key]\n      // overwrite/mutate the original function\n      facade[key] = (...args) => {\n        // call middlware function\n        return m[key](\n          // add next parameter\n          ...args.concat((...middlewareArgs) => {\n            // call original function with args from middleware\n            return prevFacade(...middlewareArgs)\n          })\n        )\n      }\n    })\n  }\n\n  return facade\n}\n"]}