{"version":3,"sources":["../../../src/dist-expire/_spec/index.spec.js"],"names":["namespace","describe","it","cache","log","use","to","be","an","Object","initial","hello","info","debug","extraData","equal","p","Promise","resolve","spy","set","get","worker","then","obj","value","called","expire","TTL","cbs","on","event","cb","push","onSpy","pub","ns","data","forEach","sub","Error","publishSpy","subscribeSpy","callCount","error","publish","subscribe","cache2"],"mappings":"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","file":"index.spec.js","sourcesContent":["import distCache from '../'\nimport inMemoryCache from '../..'\nimport sinon from 'sinon'\nimport expect from 'expect.js'\nimport {mockRedisFactory} from '../../utils/mock-redis-factory'\nimport {dummyLog} from '../../utils/log-helper'\n\nconst namespace = 'desketoy8080'\n\ndescribe('dist-expire', () => {\n  describe('-> istantiation', () => {\n    it('should be possible', () => {\n      const cache = inMemoryCache({log: dummyLog})\n      cache.use(distCache(mockRedisFactory(), namespace))\n      expect(cache).to.be.an(Object)\n    })\n  })\n\n  describe('debug', () => {\n    it('should print a debug of the cache with extra options', () => {\n      // more thorough testing of debug in debug.spec.js\n      const cache = inMemoryCache({initial: {hello: 'world'}})\n      cache.use(distCache(mockRedisFactory(), namespace))\n      const info = cache.debug({extraData: 'values'})\n      expect(info.extraData).to.equal('values')\n    })\n  })\n\n  describe('-> inheritance', () => {\n    it('should be able to use methods from extended class (using middleware)', () => {\n      const cache = inMemoryCache({log: dummyLog})\n      cache.use(distCache(mockRedisFactory(), namespace))\n      const p = () => Promise.resolve()\n      const spy = sinon.spy(p)\n      cache.set('hello', 'world')\n      return cache.get('hello', {worker: spy}).then((obj) => {\n        expect(obj.value).to.equal('world')\n        expect(spy.called).to.equal(false)\n      })\n    })\n  })\n\n  describe('-> distributed expire', () => {\n    it('should expire content on expire', () => {\n      const spy = sinon.spy(() => Promise.resolve('world2'))\n      const cache = inMemoryCache({initial: {hello: 'world'}, log: dummyLog})\n      cache.use(distCache(mockRedisFactory(), namespace))\n      cache.expire(['hello'])\n      expect(cache.get('hello').TTL).to.equal(0)\n      return cache.get('hello', {worker: spy}).then((obj) => {\n        expect(obj.value).to.equal('world2')\n        expect(spy.called).to.equal(true)\n      })\n    })\n\n    it('should handle errors if data is non-parsable', () => {\n      const cbs = []\n      const on = (event, cb) => cbs.push(cb)\n      const onSpy = sinon.spy(on)\n      const pub = (ns, data) => {\n        cbs.forEach((cb) => cb(ns, data))\n      }\n      const sub = (ns, cb) => {\n        if (ns === namespace) {\n          return cb(null, 'ok')\n        }\n        return cb(new Error('dummyerror'), null)\n      }\n      const publishSpy = sinon.spy(pub)\n      const subscribeSpy = sinon.spy(sub)\n      const cache = inMemoryCache({initial: {hello: 'world'}, log: dummyLog})\n      const callCount = dummyLog.error.callCount\n      cache.use(distCache(mockRedisFactory({\n        on: onSpy,\n        publish: publishSpy,\n        subscribe: subscribeSpy\n      }), namespace))\n      pub('asdf', '{')\n      expect(dummyLog.error.callCount).to.equal(callCount + 1)\n      const cache2 = inMemoryCache({initial: {hello: 'world'}, log: dummyLog})\n      cache2.use(distCache(mockRedisFactory({\n        on: onSpy,\n        publish: publishSpy,\n        subscribe: subscribeSpy\n      }), 'dummy'))\n      expect(dummyLog.error.callCount).to.equal(callCount + 2)\n    })\n  })\n})\n"]}