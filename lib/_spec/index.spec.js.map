{"version":3,"sources":["../../src/_spec/index.spec.js"],"names":["dummyKey","cacheValue","keyNamespace","preCached","describe","it","cacheInstance","to","be","a","Object","info","debug","itemCount","equal","obj","hei","initial","get","value","cache","hello","extraData","spy","beforeEach","p","Promise","resolve","worker","then","eql","called","set","has","del","clear","now","Date","setTimeout","obj2","yoman","obj3","all","val1","val2","callCount","log","timeoutSpy","waiting","workerTimeout","not","catch","err","an","Error","done","resolveSpy","conf","deltaWait","wait","rejectionSpy","reject","delete","started","waitUntil","keys","reverse","values","map","Array","from","entries","key","expire","TTL","maxLength","addDisposer","args","created","callArgs","removeDisposer"],"mappings":"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","file":"index.spec.js","sourcesContent":["/* eslint max-nested-callbacks: 0 */\nimport inMemoryCache, {distCache, persistentCache} from '../'\nimport expect from 'expect.js'\nimport sinon from 'sinon'\nimport {dummyLog} from '../utils/log-helper'\n\nconst dummyKey = 'hei/verden'\nconst cacheValue = {\n  keyNamespace: 'valueAsString'\n}\nconst preCached = {\n  [dummyKey]: cacheValue\n}\n\ndescribe('CacheManager', () => {\n  describe('instantation', () => {\n    it('should create a new empty instance', () => {\n      const cacheInstance = inMemoryCache({}, {})\n      expect(cacheInstance).to.be.a(Object)\n      const info = cacheInstance.debug()\n      expect(info.itemCount).to.equal(0)\n    })\n\n    it('should have exported plugins', () => {\n      expect(distCache).to.be.a('function')\n      expect(persistentCache).to.be.a('function')\n    })\n\n    it('should create a new prefilled instance with a cloned copy', () => {\n      const obj = {hei: 'verden'}\n      const cacheInstance = inMemoryCache({initial: obj})\n      obj.hei = 'world'\n      expect(cacheInstance).to.be.a(Object)\n      const info = cacheInstance.debug()\n      expect(info.itemCount).to.equal(1)\n      expect(cacheInstance.get('hei').value).to.equal('verden')\n      expect(cacheInstance.get('hei').cache).to.equal('hit')\n    })\n  })\n\n  describe('debug', () => {\n    it('should print a debug of the cache with extra options', () => {\n      // more thorough testing of debug in debug.spec.js\n      const cacheInstance = inMemoryCache({initial: {hello: 'world'}})\n      const info = cacheInstance.debug({extraData: 'values'})\n      expect(info.extraData).to.equal('values')\n    })\n  })\n\n  describe('-> hot cache', () => {\n    let cacheInstance\n    let spy\n\n    beforeEach(() => {\n      cacheInstance = inMemoryCache({initial: preCached})\n      const p = () => Promise.resolve()\n      spy = sinon.spy(p)\n    })\n\n    it('should return cached content if not stale', () => {\n      return cacheInstance.get(dummyKey, {worker: spy}).then((obj) => {\n        expect(obj.value).to.eql(cacheValue)\n        expect(obj.cache).to.equal('hit')\n        expect(spy.called).to.equal(false)\n      })\n    })\n  })\n\n  describe('-> has/del/clear', () => {\n    let cacheInstance\n\n    beforeEach(() => {\n      cacheInstance = inMemoryCache({initial: preCached})\n    })\n\n    it('should return true if key exists in cache', () => {\n      cacheInstance.set('key', 'value')\n      expect(cacheInstance.has('key')).to.equal(true)\n    })\n\n    it('should return false if key is not in cache', () => {\n      expect(cacheInstance.has('key')).to.equal(false)\n    })\n\n    it('should return false if key was deleted from cache', () => {\n      cacheInstance.set('key', 'value')\n      cacheInstance.del('key')\n      expect(cacheInstance.has('key')).to.equal(false)\n    })\n\n    it('should return false if key was deleted from cache', () => {\n      cacheInstance.set('key1', 'value')\n      cacheInstance.set('key2', 'value')\n      cacheInstance.clear()\n      expect(cacheInstance.has('key1')).to.equal(false)\n      expect(cacheInstance.has('key2')).to.equal(false)\n    })\n  })\n\n  describe('-> cold/stale cache', () => {\n    let cacheInstance\n    let spy\n    let now\n\n    beforeEach(() => {\n      cacheInstance = inMemoryCache({initial: preCached})\n      cacheInstance.set(dummyKey, cacheInstance.get(dummyKey).value, -1000)\n      now = Date.now()\n      spy = sinon.spy(() => new Promise((resolve) => {\n        setTimeout(() => resolve(now), 10)\n      }))\n    })\n\n    it('should return promised content when key is not present', () => {\n      return cacheInstance.get('N/A', {worker: spy}).then((obj) => {\n        expect(obj.value).to.eql(now)\n        expect(obj.cache).to.equal('miss')\n        expect(spy.called).to.equal(true)\n      })\n    })\n\n    it('should return synchronous get when no worker is given', () => {\n      // miss\n      const obj = cacheInstance.get('N/A')\n      expect(obj).to.equal(null)\n      // stale\n      const obj2 = cacheInstance.get(dummyKey)\n      expect(obj2.value).to.eql(cacheValue)\n      expect(obj2.cache).to.equal('stale')\n      // hot\n      cacheInstance.set('hello', {yoman: 'world'})\n      const obj3 = cacheInstance.get('hello')\n      expect(obj3.value).to.eql({yoman: 'world'})\n      expect(obj3.cache).to.equal('hit')\n    })\n\n    it('should return promised content if cache is stale', () => {\n      return cacheInstance.get(dummyKey, {worker: spy}).then((obj) => {\n        expect(obj.value).to.eql(now)\n        expect(obj.cache).to.equal('miss')\n        expect(spy.called).to.equal(true)\n      })\n    })\n  })\n\n  describe('-> worker queue', () => {\n    let cacheInstance\n    let spy\n    let now\n\n    beforeEach(() => {\n      cacheInstance = inMemoryCache({initial: preCached})\n      cacheInstance.set(dummyKey, cacheInstance.get(dummyKey).value, -1000)\n      now = Date.now()\n      spy = sinon.spy(() => new Promise((resolve) => {\n        setTimeout(() => resolve(now), 10)\n      }))\n    })\n\n    it('should run only one promise, while two requests asks for data from cold cache concurrently', () => {\n      return Promise.all([\n        cacheInstance.get(dummyKey, {worker: spy}),\n        cacheInstance.get(dummyKey, {worker: spy})\n      ]).then(([val1, val2]) => {\n        expect(val1.value).to.eql(val2.value)\n        expect(spy.callCount).to.equal(1)\n        expect(val1.cache).to.equal('miss')\n        expect(val2.cache).to.equal('hit')\n      })\n    })\n  })\n\n  describe('-> error handling (timeouts)', () => {\n    let cacheInstance\n\n    beforeEach(() => {\n      cacheInstance = inMemoryCache({initial: preCached, log: dummyLog})\n      cacheInstance.set(dummyKey, cacheInstance.get(dummyKey).value, -1000)\n    })\n\n    it('should return stale cache and increase wait if promise reaches timeout', () => {\n      const timeoutSpy = sinon.spy(() => new Promise((resolve) => {\n        setTimeout(() => resolve('another object'), 1000)\n      }))\n      expect(cacheInstance.waiting.get(dummyKey)).to.be.a('undefined')\n      return cacheInstance.get(dummyKey, { workerTimeout: 0, worker: timeoutSpy }).then((obj) => {\n        expect(timeoutSpy.called).to.equal(true)\n        expect(cacheInstance.waiting.get(dummyKey)).not.to.equal(0)\n        expect(obj.value).to.eql(cacheValue)\n        expect(obj.cache).to.equal('stale')\n      })\n    })\n\n    it('should reject if cache is cold and a timeout occurs', () => {\n      const timeoutSpy = sinon.spy(() => new Promise((resolve) => {\n        setTimeout(() => resolve('another object'), 1000)\n      }))\n      return cacheInstance.get(dummyKey, {workerTimeout: 0, worker: timeoutSpy})\n      .catch((err) => {\n        expect(timeoutSpy.called).to.equal(true)\n        expect(err).to.be.an(Error)\n      })\n    })\n\n    it('should re-run promise after deltaWait time has passed', (done) => {\n      const timeoutSpy = sinon.spy(() => new Promise((resolve) => {\n        setTimeout(() => resolve('another object'), 1000)\n      }))\n      const resolveSpy = sinon.spy(() => Promise.resolve('hei verden'))\n      const conf = {\n        deltaWait: 10,\n        workerTimeout: 10\n      }\n      cacheInstance.get(dummyKey, {...conf, worker: timeoutSpy}).then((obj) => {\n        // 1. should return stale cache when timeout occurs\n        expect(obj.value).to.eql(cacheValue)\n        expect(cacheInstance.waiting.get(dummyKey).wait).to.equal(10)\n        return cacheInstance.get(dummyKey, {...conf, worker: resolveSpy}).then((obj) => {\n          // 2. should return stale cache before wait period has finished\n          expect(obj.cache).to.equal('stale')\n          expect(obj.value).to.eql(cacheValue)\n          setTimeout(() => {\n            return cacheInstance.get(dummyKey, {...conf, worker: resolveSpy}).then((obj) => {\n              // 3. should return fresh data when wait period has finished\n              expect(obj.value).to.eql('hei verden')\n              expect(obj.cache).to.equal('miss')\n              done()\n            })\n          }, 10)\n        })\n      }).catch(done)\n    })\n  })\n\n  describe('-> error handling (rejections)', () => {\n    let cacheInstance\n\n    beforeEach(() => {\n      cacheInstance = inMemoryCache({initial: preCached, log: dummyLog})\n      cacheInstance.set(dummyKey, cacheInstance.get(dummyKey).value, -1000)\n    })\n\n    it('should return stale cache and set wait if a promise rejection occurs', () => {\n      const rejectionSpy = sinon.spy(() => Promise.reject(new Error('an error occurred')))\n      expect(cacheInstance.waiting.get(dummyKey)).to.be.a('undefined')\n      return cacheInstance.get(dummyKey, {worker: rejectionSpy}).then((obj) => {\n        expect(rejectionSpy.called).to.equal(true)\n        expect(cacheInstance.waiting.get(dummyKey)).not.to.equal(0)\n        expect(obj.value).to.eql(cacheValue)\n        expect(obj.cache).to.equal('stale')\n      })\n    })\n\n    it('should reject if cache is cold and a rejection occurs', () => {\n      const rejectionSpy = sinon.spy(() => Promise.reject(new Error('an error occurred')))\n      return cacheInstance.get(dummyKey, {worker: rejectionSpy}).catch((err) => {\n        expect(rejectionSpy.called).to.equal(true)\n        expect(err).to.be.an(Error)\n      })\n    })\n\n    it('should reject if an Error is thrown', () => {\n      const rejectionSpy = sinon.spy(() => {\n        throw new Error('an error occurred')\n      })\n      return cacheInstance.get(dummyKey, {worker: rejectionSpy}).catch((err) => {\n        expect(rejectionSpy.called).to.equal(true)\n        expect(err).to.be.an(Error)\n      })\n    })\n\n    it('should re-run promise after deltaWait time has passed (when failing caused by a rejection)', (done) => {\n      const rejectionSpy = sinon.spy(() => Promise.reject(new Error('')))\n      const resolveSpy = sinon.spy(() => Promise.resolve('hei verden'))\n      const conf = {\n        deltaWait: 10\n      }\n      cacheInstance.get(dummyKey, {...conf, worker: rejectionSpy}).then((obj) => {\n        // 1. should return stale cache when rejection occurs\n        expect(obj.value).to.eql(cacheValue)\n        return cacheInstance.get(dummyKey, {...conf, worker: resolveSpy}).then((obj) => {\n          // 2. should return stale cache before wait period has finished\n          expect(obj.value).to.eql(cacheValue)\n          expect(obj.cache).to.equal('stale')\n          setTimeout(() => {\n            return cacheInstance.get(dummyKey, {...conf, worker: resolveSpy}).then((obj) => {\n              // 3. should return fresh data when wait period has finished\n              expect(obj.value).to.eql('hei verden')\n              expect(obj.cache).to.equal('miss')\n              done()\n            })\n          }, 10)\n        })\n      }).catch(done)\n    })\n\n    it('should re-run promise after deltaWait time has passed (when failing caused by a rejection and cache is cold)', (done) => {\n      const rejectionSpy = sinon.spy(() => Promise.reject(new Error('')))\n      const conf = {\n        deltaWait: 10\n      }\n      cacheInstance.get('N/A', {...conf, worker: rejectionSpy}).catch((err) => {\n        expect(err).to.be.an(Error)\n        expect(rejectionSpy.callCount).to.equal(1)\n        cacheInstance.get('N/A', {...conf, worker: rejectionSpy}).catch((err) => {\n          expect(err).to.be.an(Error)\n          expect(rejectionSpy.callCount).to.equal(1)\n          cacheInstance.set('N/A', 'hei verden')\n          cacheInstance.waiting.delete('N/A')\n          setTimeout(() => {\n            return cacheInstance.get('N/A', {...conf, worker: rejectionSpy}).then((obj) => {\n              expect(rejectionSpy.callCount).to.equal(1)\n              expect(obj.value).to.eql('hei verden')\n              expect(obj.cache).to.equal('hit')\n              done()\n            })\n          }, 10)\n        })\n      }).catch(done)\n    })\n\n    it('should increase deltaWait after several re-runs', (done) => {\n      const rejectionSpy = sinon.spy(() => Promise.reject(new Error('')))\n      const conf = {\n        deltaWait: 10\n      }\n      expect(cacheInstance.waiting.get('N/A')).to.be.a('undefined')\n      cacheInstance.get('N/A', {...conf, worker: rejectionSpy}).catch((err) => {\n        expect(err).to.be.an(Error)\n        expect(rejectionSpy.callCount).to.equal(1)\n        expect(cacheInstance.waiting.get('N/A').wait).to.equal(10)\n        const {started} = cacheInstance.waiting.get('N/A')\n        cacheInstance.get('N/A', {...conf, worker: rejectionSpy}).catch((err) => {\n          expect(err).to.be.an(Error)\n          expect(rejectionSpy.callCount).to.equal(1)\n          expect(cacheInstance.waiting.get('N/A')).to.eql({\n            started,\n            wait: 10,\n            waitUntil: started + 10\n          })\n          setTimeout(() => {\n            return cacheInstance.get('N/A', {...conf, worker: rejectionSpy}).catch((err) => {\n              expect(err).to.be.an(Error)\n              expect(rejectionSpy.callCount).to.equal(2)\n              expect(cacheInstance.waiting.get('N/A').wait).to.equal(10)\n              expect(cacheInstance.waiting.get('N/A').started).not.to.equal(started)\n              done()\n            })\n          }, 10)\n        })\n      }).catch(done)\n    })\n  })\n\n  describe('-> keys/values/entries', () => {\n    let cacheInstance\n\n    beforeEach(() => {\n      cacheInstance = inMemoryCache({initial: {\n        'house/1': {hei: 'verden1'},\n        'house/2': {hei: 'verden2'},\n        'guest/2': {hei: 'verden3'}\n      }})\n    })\n\n    it('should return keys', () => {\n      expect(cacheInstance.keys()).to.eql(['house/1', 'house/2', 'guest/2'].reverse())\n    })\n\n    it('should return values', () => {\n      expect(cacheInstance\n        .values()\n        .map(({value}) => value))\n        .to.eql([{hei: 'verden3'}, {hei: 'verden2'}, {hei: 'verden1'}])\n    })\n\n    it('should return entries', () => {\n      expect(Array.from(cacheInstance.entries())\n        .map(([key, {value}]) => {\n          return {[key]: value}\n        })).to.eql([\n          {'guest/2': {hei: 'verden3'}},\n          {'house/2': {hei: 'verden2'}},\n          {'house/1': {hei: 'verden1'}}\n        ])\n    })\n  })\n\n  describe('-> expire', () => {\n    let cacheInstance\n\n    beforeEach(() => {\n      cacheInstance = inMemoryCache({initial: {\n        'house/1': {hei: 'verden'},\n        'house/2': {hei: 'verden'},\n        'guest/2': {hei: 'verden'}\n      }})\n    })\n\n    it('should expire all house keys', () => {\n      cacheInstance.expire(['house/*'])\n      expect(cacheInstance.get('house/1').TTL).to.equal(0)\n      expect(cacheInstance.get('house/2').TTL).to.equal(0)\n      expect(cacheInstance.get('guest/2').TTL).not.to.equal(0)\n    })\n\n    it('should expire given house keys', () => {\n      cacheInstance.expire(['house/*', 'guest/2'])\n      expect(cacheInstance.get('house/1').TTL).to.equal(0)\n      expect(cacheInstance.get('house/2').TTL).to.equal(0)\n      expect(cacheInstance.get('guest/2').TTL).to.equal(0)\n    })\n  })\n\n  describe('-> LRU capabilities', () => {\n    it('should throw away first entered entry on inital state', () => {\n      const cacheInstance = inMemoryCache({\n        initial: {\n          'house/1': {hei: 'verden'},\n          'house/2': {hei: 'verden'},\n          'guest/3': {hei: 'verden'}\n        },\n        maxLength: 2\n      })\n      const info = cacheInstance.debug()\n      expect(info.itemCount).to.equal(2)\n      expect(cacheInstance.keys()).to.eql(['guest/3', 'house/2'])\n    })\n\n    it('should call dispose on set operations when LRU cache evicts object', () => {\n      const cacheInstance = inMemoryCache({maxLength: 2})\n      const spy = sinon.spy()\n      cacheInstance.addDisposer(spy)\n      cacheInstance.set('house/1', {hei: 'verden'})\n      cacheInstance.set('house/2', {hei: 'verden'})\n      cacheInstance.set('guest/3', {hei: 'verden'})\n      expect(spy.called).to.equal(true)\n      const key = spy.args[0][0]\n      const {created, ...callArgs} = spy.args[0][1]\n      expect(key).to.equal('house/1')\n      expect(callArgs).to.eql({\n        TTL: 86400000,\n        value: { hei: 'verden' },\n        cache: 'hit'\n      })\n      cacheInstance.removeDisposer(spy)\n      cacheInstance.set('guest/4', {hei: 'verden'})\n      expect(spy.callCount).to.equal(1)\n      const info = cacheInstance.debug()\n      expect(info.itemCount).to.equal(2)\n      expect(cacheInstance.keys()).to.eql(['guest/4', 'guest/3'])\n    })\n\n    it('should call dispose on del operations', () => {\n      const cacheInstance = inMemoryCache({maxLength: 2})\n      const spy = sinon.spy()\n      cacheInstance.addDisposer(spy)\n      cacheInstance.set('house/1', {hei: 'verden'})\n      cacheInstance.del('house/1')\n      expect(spy.called).to.equal(true)\n      cacheInstance.removeDisposer(spy)\n    })\n\n    it('should call dispose on clear operations', () => {\n      const cacheInstance = inMemoryCache({maxLength: 2})\n      const spy = sinon.spy()\n      cacheInstance.addDisposer(spy)\n      cacheInstance.set('house/1', {hei: 'verden'})\n      cacheInstance.clear()\n      expect(spy.called).to.equal(true)\n      cacheInstance.removeDisposer(spy)\n    })\n  })\n})\n"]}