{"version":3,"sources":["../../../src/persistence/_spec/persistence-helpers.spec.js"],"names":["parsedCache","hello","redisCache","Object","keys","reduce","acc","key","JSON","stringify","describe","it","to","equal","redisClient","mgetSpy","events","setTimeout","data","end","spy","keysToRead","cb","hei","mget","then","results","eql","error","Error","catch","err","message","delSpy","p","del","result","called","be","an","args","values","map","key2","obj","str","arr","func","re","date","Date"],"mappings":";;AAAA;;AASA;;AAGA;;AACA;;;;AACA;;;;;;AAEA,MAAMA,cAAc;AAClB,cAAY,EAACC,OAAO,QAAR,EADM;AAElB,cAAY,EAACA,OAAO,QAAR,EAFM;AAGlB,cAAY,EAACA,OAAO,QAAR;AAHM,CAApB;;AAMA,MAAMC,aAAaC,OAAOC,IAAP,CAAYJ,WAAZ,EAAyBK,MAAzB,CAAgC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/DD,MAAIC,GAAJ,IAAWC,KAAKC,SAAL,CAAeT,YAAYO,GAAZ,CAAf,CAAX;AACA,SAAOD,GAAP;AACD,CAHkB,EAGhB,EAHgB,CAAnB;;AAKAI,SAAS,qBAAT,EAAgC,MAAM;AACpCA,WAAS,gBAAT,EAA2B,MAAM;AAC/BC,OAAG,cAAH,EAAmB,MAAM;AACvB,YAAMJ,MAAM,qCAAY,QAAZ,EAAsB,KAAtB,CAAZ;AACA,4BAAOA,GAAP,EAAYK,EAAZ,CAAeC,KAAf,CAAqB,YAArB;AACD,KAHD;AAID,GALD;;AAOAH,WAAS,wBAAT,EAAmC,MAAM;AACvCC,OAAG,mBAAH,EAAwB,MAAM;AAC5B,YAAMJ,MAAM,6CAAoB,8BAApB,EAAoD,oCAApD,CAAZ;AACA,4BAAOA,GAAP,EAAYK,EAAZ,CAAeC,KAAf,CAAqB,OAArB;AACD,KAHD;AAID,GALD;;AAOAH,WAAS,gBAAT,EAA2B,MAAM;AAC/B,QAAII,WAAJ;AACA,QAAIC,OAAJ;;AAEAJ,OAAG,kBAAH,EAAuB,MAAM;AAC3B,YAAMK,SAAS,EAAf;AACAC,iBAAW,MAAM;AACfD,eAAOE,IAAP,CAAY,CAAZ,EAAe,CAAC,0BAAD,CAAf;AACAF,eAAOG,GAAP,CAAW,CAAX;AACD,OAHD,EAGG,EAHH;AAIAJ,gBAAU,gBAAMK,GAAN,CAAU,CAACC,UAAD,EAAaC,EAAb,KAAoB;AACtCA,WAAG,IAAH,EAAS,CAACd,KAAKC,SAAL,CAAe,EAACc,KAAK,QAAN,EAAf,CAAD,CAAT;AACD,OAFS,CAAV;AAGAT,oBAAc,wCAAiB,EAACU,MAAMT,OAAP,EAAjB,EAAkC,EAACC,MAAD,EAAlC,GAAd;AACA,aAAO,qCAAY,oBAAZ,EAAkCF,WAAlC,uBAAyDW,IAAzD,CAA+DC,OAAD,IAAa;AAChF,8BAAOA,OAAP,EAAgBd,EAAhB,CAAmBe,GAAnB,CAAuB;AACrB,sCAA4B;AAC1BJ,iBAAK;AADqB;AADP,SAAvB;AAKD,OANM,CAAP;AAOD,KAjBD;;AAmBAZ,OAAG,wCAAH,EAA6C,MAAM;AACjD,YAAMK,SAAS,EAAf;AACAC,iBAAW,MAAM;AACfD,eAAOY,KAAP,CAAa,CAAb,EAAgB,IAAIC,KAAJ,CAAU,YAAV,CAAhB;AACD,OAFD,EAEG,GAFH;AAGAf,oBAAc,wCAAiB,EAAjB,EAAqB,EAACE,MAAD,EAArB,GAAd;AACA,aAAO,qCAAY,oBAAZ,EAAkCF,WAAlC,uBAAyDgB,KAAzD,CAAgEC,GAAD,IAAS;AAC7E,8BAAOA,IAAIC,OAAX,EAAoBpB,EAApB,CAAuBC,KAAvB,CAA6B,YAA7B;AACD,OAFM,CAAP;AAGD,KATD;AAUD,GAjCD;;AAmCAH,WAAS,cAAT,EAAyB,MAAM;AAC7B,QAAII,WAAJ;AACA,QAAImB,MAAJ;;AAEAtB,OAAG,oBAAH,EAAyB,MAAM;AAC7B,YAAMuB,IAAI,CAAC3B,GAAD,EAAMe,EAAN,KAAaA,GAAG,IAAH,EAAS,IAAT,CAAvB;AACAW,eAAS,gBAAMb,GAAN,CAAUc,CAAV,CAAT;AACApB,oBAAc,wCAAiB,EAACqB,KAAKF,MAAN,EAAjB,GAAd;AACA,aAAO,mCAAU,SAAV,EAAqBnB,WAArB,uBAA4CW,IAA5C,CAAkDW,MAAD,IAAY;AAClE,8BAAOH,OAAOI,MAAd,EAAsBzB,EAAtB,CAAyBC,KAAzB,CAA+B,IAA/B;AACA,8BAAOuB,MAAP,EAAexB,EAAf,CAAkBC,KAAlB,CAAwB,IAAxB;AACD,OAHM,CAAP;AAID,KARD;;AAUAF,OAAG,wCAAH,EAA6C,MAAM;AACjD,YAAMuB,IAAI,CAAC3B,GAAD,EAAMe,EAAN,KAAaA,GAAG,IAAIO,KAAJ,CAAU,QAAV,CAAH,EAAwB,IAAxB,CAAvB;AACAI,eAAS,gBAAMb,GAAN,CAAUc,CAAV,CAAT;AACApB,oBAAc,wCAAiB,EAACqB,KAAKF,MAAN,EAAjB,GAAd;AACA,aAAO,mCAAU,SAAV,EAAqBnB,WAArB,uBAA4CgB,KAA5C,CAAmDC,GAAD,IAAS;AAChE,8BAAOE,OAAOI,MAAd,EAAsBzB,EAAtB,CAAyBC,KAAzB,CAA+B,IAA/B;AACA,8BAAOkB,GAAP,EAAYnB,EAAZ,CAAe0B,EAAf,CAAkBC,EAAlB,CAAqBV,KAArB;AACD,OAHM,CAAP;AAID,KARD;AASD,GAvBD;;AAyBAnB,WAAS,eAAT,EAA0B,MAAM;AAC9BC,OAAG,+CAAH,EAAoD,MAAM;AACxD,YAAMsB,SAAS,gBAAMb,GAAN,CAAU,CAACb,GAAD,EAAMe,EAAN,KAAaA,GAAG,IAAH,EAAS,IAAT,CAAvB,CAAf;AACA,YAAMN,SAAS,EAAf;AACAC,iBAAW,MAAM;AACfD,eAAOE,IAAP,CAAY,CAAZ,EAAe,CAAC,0BAAD,CAAf;AACAF,eAAOG,GAAP,CAAW,CAAX;AACD,OAHD,EAGG,GAHH;AAIA,YAAMJ,UAAU,gBAAMK,GAAN,CAAU,CAACC,UAAD,EAAaC,EAAb,KAAoB;AAC5CA,WAAG,IAAH,EAAS,CAACd,KAAKC,SAAL,CAAe,EAACc,KAAK,QAAN,EAAf,CAAD,CAAT;AACD,OAFe,CAAhB;AAGA,YAAMT,cAAc,wCAAiB,EAACqB,KAAKF,MAAN,EAAcT,MAAMT,OAApB,EAAjB,EAA+C,EAACC,MAAD,EAA/C,GAApB;AACA,aAAO,oCAAW,MAAX,EAAmBF,WAAnB,EAAgCW,IAAhC,CAAqC,CAAC,GAAGe,IAAJ,KAAa;AACvD,8BAAOP,OAAOI,MAAd,EAAsBzB,EAAtB,CAAyBC,KAAzB,CAA+B,IAA/B;AACD,OAFM,CAAP;AAGD,KAdD;AAeD,GAhBD;;AAkBAH,WAAS,aAAT,EAAwB,MAAM;AAC5B,QAAII,WAAJ;AACA,QAAIC,OAAJ;;AAEAJ,OAAG,2BAAH,EAAgC,MAAM;AACpC,YAAM8B,SAAStC,OAAOC,IAAP,CAAYF,UAAZ,EAAwBwC,GAAxB,CAA6BnC,GAAD,IAASL,WAAWK,GAAX,CAArC,CAAf;AACAQ,gBAAU,gBAAMK,GAAN,CAAU,CAAChB,IAAD,EAAOkB,EAAP,KAAcA,GAAG,IAAH,EAASmB,MAAT,CAAxB,CAAV;AACA3B,oBAAc,wCAAiB,EAACU,MAAMT,OAAP,EAAjB,GAAd;AACA,aAAO,kCAASZ,OAAOC,IAAP,CAAYF,UAAZ,CAAT,EAAkCY,WAAlC,uBAAyDW,IAAzD,CAA+DW,MAAD,IAAY;AAC/E,8BAAOrB,QAAQsB,MAAf,EAAuBzB,EAAvB,CAA0BC,KAA1B,CAAgC,IAAhC;AACA,8BAAOuB,MAAP,EAAexB,EAAf,CAAkBe,GAAlB,CAAsB3B,WAAtB;AACD,OAHM,CAAP;AAID,KARD;;AAUAW,OAAG,yCAAH,EAA8C,MAAM;AAClD,YAAMuB,IAAI,CAAC9B,IAAD,EAAOkB,EAAP,KAAcA,GAAG,IAAH,EAAS,EAAT,CAAxB;AACAP,gBAAU,gBAAMK,GAAN,CAAUc,CAAV,CAAV;AACApB,oBAAc,wCAAiB,EAACU,MAAMT,OAAP,EAAjB,GAAd;AACA,aAAO,kCAASZ,OAAOC,IAAP,CAAY,EAAZ,CAAT,EAA0BU,WAA1B,uBAAiDW,IAAjD,CAAuDW,MAAD,IAAY;AACvE,8BAAOrB,QAAQsB,MAAf,EAAuBzB,EAAvB,CAA0BC,KAA1B,CAAgC,KAAhC;AACA,8BAAOuB,MAAP,EAAexB,EAAf,CAAkBe,GAAlB,CAAsB,EAAtB;AACD,OAHM,CAAP;AAID,KARD;;AAUAhB,OAAG,oCAAH,EAAyC,MAAM;AAC7C,YAAMuB,IAAI,CAAC9B,IAAD,EAAOkB,EAAP,KAAcA,GAAG,IAAH,EAAS,CAAC,KAAD,EAAQ,oBAAR,CAAT,CAAxB;AACAP,gBAAU,gBAAMK,GAAN,CAAUc,CAAV,CAAV;AACApB,oBAAc,wCAAiB,EAACU,MAAMT,OAAP,EAAjB,GAAd;AACA,aAAO,kCAAS,CAAC,MAAD,EAAS,MAAT,CAAT,EAA2BD,WAA3B,uBAAkDW,IAAlD,CAAwDW,MAAD,IAAY;AACxE,8BAAOrB,QAAQsB,MAAf,EAAuBzB,EAAvB,CAA0BC,KAA1B,CAAgC,IAAhC;AACA,8BAAOuB,MAAP,EAAexB,EAAf,CAAkBe,GAAlB,CAAsB,EAACgB,MAAM,EAAC1C,OAAO,OAAR,EAAP,EAAtB;AACD,OAHM,CAAP;AAID,KARD;;AAUAU,OAAG,qCAAH,EAA0C,MAAM;AAC9C,YAAMuB,IAAI,CAAC9B,IAAD,EAAOkB,EAAP,KAAcA,GAAG,IAAIO,KAAJ,CAAU,QAAV,CAAH,EAAwB,IAAxB,CAAxB;AACAd,gBAAU,gBAAMK,GAAN,CAAUc,CAAV,CAAV;AACApB,oBAAc,wCAAiB,EAACU,MAAMT,OAAP,EAAjB,GAAd;AACA,aAAO,kCAASZ,OAAOC,IAAP,CAAYF,UAAZ,CAAT,EAAkCY,WAAlC,uBAAyDgB,KAAzD,CAAgEC,GAAD,IAAS;AAC7E,8BAAOhB,QAAQsB,MAAf,EAAuBzB,EAAvB,CAA0BC,KAA1B,CAAgC,IAAhC;AACA,8BAAOkB,GAAP,EAAYnB,EAAZ,CAAe0B,EAAf,CAAkBC,EAAlB,CAAqBV,KAArB;AACD,OAHM,CAAP;AAID,KARD;AASD,GA3CD;;AA6CAnB,WAAS,gBAAT,EAA2B,MAAM;AAC/BC,OAAG,sCAAH,EAA2C,MAAM;AAC/C,YAAMiC,MAAM;AACVC,aAAK,QADK;AAEVC,aAAK,CAAC,CAAD,EAAI,GAAJ,EAAS,IAAI,CAAb,CAFK;AAGVF,aAAK;AACH,aAAG,CADA;AAEH,aAAG;AAFA;AAHK,OAAZ;AAQA,4BAAO,wCAAeA,GAAf,CAAP,EAA4BhC,EAA5B,CAA+BC,KAA/B,CAAqC,IAArC;AACD,KAVD;;AAYAF,OAAG,gDAAH,EAAqD,MAAM;AACzD,YAAMiC,MAAM;AACVG,cAAM,MAAM,CAAE;AADJ,OAAZ;AAGA,4BAAO,wCAAeH,GAAf,CAAP,EAA4BhC,EAA5B,CAA+BC,KAA/B,CAAqC,KAArC;AACD,KALD;;AAOAF,OAAG,8DAAH,EAAmE,MAAM;AACvE,YAAMiC,MAAM;AACVI,YAAI,KADM;AAEVC,cAAM,IAAIC,IAAJ;AAFI,OAAZ;AAIA,4BAAO,wCAAeN,GAAf,CAAP,EAA4BhC,EAA5B,CAA+BC,KAA/B,CAAqC,KAArC;AACD,KAND;AAOD,GA3BD;AA4BD,CAtKD","file":"persistence-helpers.spec.js","sourcesContent":["import {\n  deleteKey,\n  deleteKeys,\n  readKeys,\n  extractKeyFromRedis,\n  getRedisKey,\n  isSerializable,\n  loadObjects\n} from '../persistence-helpers'\nimport {\n  mockRedisFactory\n} from '../../utils/mock-redis-factory'\nimport {dummyLog} from '../../utils/log-helper'\nimport sinon from 'sinon'\nimport expect from 'expect.js'\n\nconst parsedCache = {\n  'asdf-123': {hello: 'world1'},\n  'asdf-345': {hello: 'world2'},\n  'asdf-100': {hello: 'world3'}\n}\n\nconst redisCache = Object.keys(parsedCache).reduce((acc, key) => {\n  acc[key] = JSON.stringify(parsedCache[key])\n  return acc\n}, {})\n\ndescribe('persistence-helpers', () => {\n  describe('-> getRedisKey', () => {\n    it('generate key', () => {\n      const key = getRedisKey('prefix', 'key')\n      expect(key).to.equal('prefix-key')\n    })\n  })\n\n  describe('-> extractKeyFromRedis', () => {\n    it('should match keys', () => {\n      const key = extractKeyFromRedis('prefix-http://localhost:8080', 'prefix-http://localhost:8080-myKey')\n      expect(key).to.equal('myKey')\n    })\n  })\n\n  describe('-> loadObjects', () => {\n    let redisClient\n    let mgetSpy\n\n    it('should load keys', () => {\n      const events = {}\n      setTimeout(() => {\n        events.data[0](['test-localhost8080-myKey'])\n        events.end[0]()\n      }, 20)\n      mgetSpy = sinon.spy((keysToRead, cb) => {\n        cb(null, [JSON.stringify({hei: 'verden'})])\n      })\n      redisClient = mockRedisFactory({mget: mgetSpy}, {events})()\n      return loadObjects('test-localhost8080', redisClient, dummyLog).then((results) => {\n        expect(results).to.eql({\n          'test-localhost8080-myKey': {\n            hei: 'verden'\n          }\n        })\n      })\n    })\n\n    it('should handle errors when loading keys', () => {\n      const events = {}\n      setTimeout(() => {\n        events.error[0](new Error('dummyerror'))\n      }, 100)\n      redisClient = mockRedisFactory({}, {events})()\n      return loadObjects('test-localhost8080', redisClient, dummyLog).catch((err) => {\n        expect(err.message).to.equal('dummyerror')\n      })\n    })\n  })\n\n  describe('-> deleteKey', () => {\n    let redisClient\n    let delSpy\n\n    it('should delete keys', () => {\n      const p = (key, cb) => cb(null, 'ok')\n      delSpy = sinon.spy(p)\n      redisClient = mockRedisFactory({del: delSpy})()\n      return deleteKey('testkey', redisClient, dummyLog).then((result) => {\n        expect(delSpy.called).to.equal(true)\n        expect(result).to.equal('ok')\n      })\n    })\n\n    it('should reject if an error occurrs keys', () => {\n      const p = (key, cb) => cb(new Error('not ok'), null)\n      delSpy = sinon.spy(p)\n      redisClient = mockRedisFactory({del: delSpy})()\n      return deleteKey('testkey', redisClient, dummyLog).catch((err) => {\n        expect(delSpy.called).to.equal(true)\n        expect(err).to.be.an(Error)\n      })\n    })\n  })\n\n  describe('-> deleteKeys', () => {\n    it('should delete all keys with prefix from redis', () => {\n      const delSpy = sinon.spy((key, cb) => cb(null, 'ok'))\n      const events = {}\n      setTimeout(() => {\n        events.data[0](['test-localhost8080-myKey'])\n        events.end[0]()\n      }, 100)\n      const mgetSpy = sinon.spy((keysToRead, cb) => {\n        cb(null, [JSON.stringify({hei: 'verden'})])\n      })\n      const redisClient = mockRedisFactory({del: delSpy, mget: mgetSpy}, {events})()\n      return deleteKeys('asdf', redisClient).then((...args) => {\n        expect(delSpy.called).to.equal(true)\n      })\n    })\n  })\n\n  describe('-> readKeys', () => {\n    let redisClient\n    let mgetSpy\n\n    it('should read multiple keys', () => {\n      const values = Object.keys(redisCache).map((key) => redisCache[key])\n      mgetSpy = sinon.spy((keys, cb) => cb(null, values))\n      redisClient = mockRedisFactory({mget: mgetSpy})()\n      return readKeys(Object.keys(redisCache), redisClient, dummyLog).then((result) => {\n        expect(mgetSpy.called).to.equal(true)\n        expect(result).to.eql(parsedCache)\n      })\n    })\n\n    it('should resolve empty when no keys match', () => {\n      const p = (keys, cb) => cb(null, [])\n      mgetSpy = sinon.spy(p)\n      redisClient = mockRedisFactory({mget: mgetSpy})()\n      return readKeys(Object.keys([]), redisClient, dummyLog).then((result) => {\n        expect(mgetSpy.called).to.equal(false)\n        expect(result).to.eql({})\n      })\n    })\n\n    it('should skip keys with invalid json', () => {\n      const p = (keys, cb) => cb(null, ['{1}', '{\"hello\": \"world\"}'])\n      mgetSpy = sinon.spy(p)\n      redisClient = mockRedisFactory({mget: mgetSpy})()\n      return readKeys(['key1', 'key2'], redisClient, dummyLog).then((result) => {\n        expect(mgetSpy.called).to.equal(true)\n        expect(result).to.eql({key2: {hello: 'world'}})\n      })\n    })\n\n    it('should reject when an error occurrs', () => {\n      const p = (keys, cb) => cb(new Error('not ok'), null)\n      mgetSpy = sinon.spy(p)\n      redisClient = mockRedisFactory({mget: mgetSpy})()\n      return readKeys(Object.keys(redisCache), redisClient, dummyLog).catch((err) => {\n        expect(mgetSpy.called).to.equal(true)\n        expect(err).to.be.an(Error)\n      })\n    })\n  })\n\n  describe('isSerializable', () => {\n    it('should return true for plain objects', () => {\n      const obj = {\n        str: 'string',\n        arr: [1, '2', 1 / 2],\n        obj: {\n          1: 2,\n          3: 4\n        }\n      }\n      expect(isSerializable(obj)).to.equal(true)\n    })\n\n    it('should return false for objects with functions', () => {\n      const obj = {\n        func: () => {}\n      }\n      expect(isSerializable(obj)).to.equal(false)\n    })\n\n    it('should return false for objects with built in native objects', () => {\n      const obj = {\n        re: /123/,\n        date: new Date()\n      }\n      expect(isSerializable(obj)).to.equal(false)\n    })\n  })\n})\n"]}