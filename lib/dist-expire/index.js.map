{"version":3,"sources":["../../src/dist-expire/index.js"],"names":["EXPIRE_MESSAGE_TYPE","redisFactory","namespace","cacheInstance","redisPub","redisSubClient","onMessage","data","type","message","JSON","parse","log","info","keys","hostname","expire","e","error","setupSubscriber","redisClient","subscribe","err","cnt","debug","on","publish","stringify","extraData","next"],"mappings":";;;;;;kQAAA;;;;;AAGA;;;;;;AAEA,MAAMA,sBAAsB,qBAA5B;;AAEA;;;;;;;;;;;kBAUe,CAACC,YAAD,EAAeC,SAAf,KAA8BC,aAAD,IAAmB;AAC7D,QAAMC,WAAWH,cAAjB;AACA,QAAMI,iBAAiBJ,cAAvB;;AAEA;;;;;;AAMA,QAAMK,YAAY,CAACJ,SAAD,EAAYK,IAAZ,KAAqB;AACrC,QAAI;AACF,YAAM,EAACC,IAAD,EAAOC,OAAP,KAAkBC,KAAKC,KAAL,CAAWJ,IAAX,CAAxB;AACA,UAAIC,SAASR,mBAAb,EAAkC;AAChCG,sBAAcS,GAAd,CAAkBC,IAAlB,CAAwB,yBAAwBJ,QAAQK,IAAK,oBAAmBZ,SAAU,YAAW,aAAGa,QAAH,EAAc,EAAnH;AACAZ,sBAAca,MAAd,CAAqBP,QAAQK,IAA7B;AACD;AACF,KAND,CAME,OAAOG,CAAP,EAAU;AACVd,oBAAcS,GAAd,CAAkBM,KAAlB,CAAyB,8BAA6BhB,SAAU,MAAKK,IAAK,aAAYU,CAAE,EAAxF;AACD;AACF,GAVD;;AAYA;;;;;;AAMA,QAAME,kBAAkB,CAACC,WAAD,EAAclB,SAAd,KAA4B;AAClDkB,gBAAYC,SAAZ,CAAsBnB,SAAtB,EAAiC,CAACoB,GAAD,EAAMC,GAAN,KAAc;AAC7C,UAAID,GAAJ,EAAS;AACP,eAAOnB,cAAcS,GAAd,CAAkBM,KAAlB,CAAyB,gCAA+BhB,SAAU,SAAlE,CAAP;AACD;AACD,aAAOC,cAAcS,GAAd,CAAkBY,KAAlB,CAAyB,gDAA+CtB,SAAU,YAAWqB,GAAI,EAAjG,CAAP;AACD,KALD;AAMAH,gBAAYK,EAAZ,CAAe,SAAf,EAA0BnB,SAA1B;AACD,GARD;;AAUA;;;;;AAKA,QAAMU,SAAUF,IAAD,IAAU;AACvB,UAAML,UAAU;AACdD,YAAMR,mBADQ;AAEdS,eAAS;AACPK;AADO;AAFK,KAAhB;AAMAV,aAASsB,OAAT,CAAiBxB,SAAjB,EAA4BQ,KAAKiB,SAAL,CAAelB,OAAf,CAA5B;AACD,GARD;;AAUA,QAAMe,QAAQ,CAACI,SAAD,EAAYC,IAAZ,KAAqB;AACjC,WAAOA,gBAAM3B,SAAN,IAAoB0B,SAApB,EAAP;AACD,GAFD;;AAIAT,kBAAgBd,cAAhB,EAAgCH,SAAhC;;AAEA,SAAO;AACLc,UADK;AAELQ;AAFK,GAAP;AAID,C","file":"index.js","sourcesContent":["/**\n * @module\n **/\nimport os from 'os'\n\nconst EXPIRE_MESSAGE_TYPE = 'EXPIRE_MESSAGE_TYPE'\n\n/**\n * @description Create new middlware instance to be used by inMemoryCache module\n * @param {function} redisFactory - provides a redisClient with publish/subscribe features\n * @param {String} namespace - namespace to publish/subscribe messages (eg. http://desketoy:8080/)\n * @returns {Object} middleware facade\n * @returns {function} object.get method\n * @returns {function} object.set method\n * @returns {function} object.expire method\n * @returns {function} object.debug method\n **/\nexport default (redisFactory, namespace) => (cacheInstance) => {\n  const redisPub = redisFactory()\n  const redisSubClient = redisFactory()\n\n  /**\n   * @description callback for messages recieved from redis\n   * @param {String} namespace - namespace that were used to transmit message\n   * @param {String} data - JSON-encoded message\n   * @returns {undefined}\n   **/\n  const onMessage = (namespace, data) => {\n    try {\n      const {type, message} = JSON.parse(data)\n      if (type === EXPIRE_MESSAGE_TYPE) {\n        cacheInstance.log.info(`expire cache for keys ${message.keys} using namespace ${namespace} on host ${os.hostname()}`)\n        cacheInstance.expire(message.keys)\n      }\n    } catch (e) {\n      cacheInstance.log.error(`failed to parse message on ${namespace} - ${data}. Reason: ${e}`)\n    }\n  }\n\n  /**\n   * @description setup subscription to redis\n   * @param {RedisClient} redisClient - a connected redisClient\n   * @param {String} namespace - namespace to publish/subscribe messages (eg. http://desketoy:8080/)\n   * @returns {undefined}\n   **/\n  const setupSubscriber = (redisClient, namespace) => {\n    redisClient.subscribe(namespace, (err, cnt) => {\n      if (err) {\n        return cacheInstance.log.error(`oh oh. Subscribing for redis#${namespace} failed`)\n      }\n      return cacheInstance.log.debug(`Subscribing for incoming messages from redis#${namespace}. Count: ${cnt}`)\n    })\n    redisClient.on('message', onMessage)\n  }\n\n  /**\n   * @description distributed wrapper for expire calls\n   * @param {Array<String>} keys - Array of keys. Accepts * as wildcards (converted to .*)\n   * @returns {undefined}\n   **/\n  const expire = (keys) => {\n    const message = {\n      type: EXPIRE_MESSAGE_TYPE,\n      message: {\n        keys\n      }\n    }\n    redisPub.publish(namespace, JSON.stringify(message))\n  }\n\n  const debug = (extraData, next) => {\n    return next({namespace, ...extraData})\n  }\n\n  setupSubscriber(redisSubClient, namespace)\n\n  return {\n    expire,\n    debug\n  }\n}\n"]}