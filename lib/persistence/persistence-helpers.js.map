{"version":3,"sources":["../../src/persistence/persistence-helpers.js"],"names":["MAX_PAGE_SIZE","extractKeyFromRedis","prefix","key","replace","RegExp","getRedisKey","join","readKeys","keys","redisClient","log","length","Promise","resolve","p","i","keysToRead","slice","push","mget","err","results","warn","reduce","acc","JSON","parse","e","all","then","next","Object","assign","scanKeys","cacheKeyPrefix","reject","stream","scanStream","match","count","on","resultKeys","deleteKey","del","res","deleteKeys","map","loadObjects","isSerializable","obj"],"mappings":"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","file":"persistence-helpers.js","sourcesContent":["/**\n * @module\n **/\nimport isUndefined from 'lodash/isUndefined'\nimport isNull from 'lodash/isNull'\nimport isBoolean from 'lodash/isBoolean'\nimport isNumber from 'lodash/isNumber'\nimport isString from 'lodash/isString'\nimport isArray from 'lodash/isArray'\nimport isPlainObject from 'lodash/isPlainObject'\n\nconst MAX_PAGE_SIZE = 100\n\nexport const extractKeyFromRedis = (prefix, key) => {\n  return key.replace(new RegExp(`${prefix}-`), '')\n}\n\nexport const getRedisKey = (prefix, key = '') => {\n  return `${[prefix, key].join('-')}`\n}\n\nexport const readKeys = (keys, redisClient, log) => {\n  if (keys.length === 0) {\n    return Promise.resolve({})\n  }\n  const p = []\n  for (let i = 0; i < keys.length; i = i + MAX_PAGE_SIZE) {\n    const keysToRead = keys.slice(i, i + MAX_PAGE_SIZE)\n    p.push(new Promise((resolve) => {\n      redisClient.mget(keysToRead, (err, results) => {\n        if (err) {\n          log.warn(`could not read keys into cache, reason: ${err}`)\n          resolve({})\n          return\n        }\n        resolve(keysToRead.reduce((acc, key, i) => {\n          try {\n            acc[key] = JSON.parse(results[i])\n          } catch (e) {\n            log.warn(`could not parse value for ${key} as JSON. ${results[i]}`)\n          }\n          return acc\n        }, {}))\n      })\n    }))\n  }\n  return Promise.all(p).then((results) => {\n    return results.reduce((acc, next) => {\n      Object.assign(acc, next)\n      return acc\n    }, {})\n  })\n}\n\nexport const scanKeys = (cacheKeyPrefix, redisClient) => {\n  const keys = []\n  return new Promise((resolve, reject) => {\n    const stream = redisClient.scanStream({\n      match: `${cacheKeyPrefix}*`,\n      count: 100\n    })\n    stream.on('data', (resultKeys) => {\n      keys.push(...resultKeys)\n    })\n    stream.on('end', () => {\n      resolve(keys)\n    })\n    stream.on('error', (err) => {\n      reject(err)\n    })\n  })\n}\n\nexport const deleteKey = (key, redisClient) => {\n  return new Promise((resolve, reject) => {\n    redisClient.del(key, (err, res) => {\n      if (err) {\n        reject(err)\n        return\n      }\n      resolve(res)\n    })\n  })\n}\n\nexport const deleteKeys = (cacheKeyPrefix, redisClient) => {\n  return scanKeys(cacheKeyPrefix, redisClient).then((keys) => {\n    return Promise.all(keys.map((key) => deleteKey(key, redisClient)))\n  })\n}\n\nexport const loadObjects = (cacheKeyPrefix, redisClient, log) => {\n  return scanKeys(cacheKeyPrefix, redisClient)\n    .then((keys) => {\n      return readKeys(keys, redisClient, log)\n    })\n}\n\n// credits to https://stackoverflow.com/users/128816/treznik\n// https://stackoverflow.com/questions/30579940/reliable-way-to-check-if-objects-is-serializable-in-javascript\nexport const isSerializable = (obj) => {\n  if (isUndefined(obj) ||\n      isNull(obj) ||\n      isBoolean(obj) ||\n      isNumber(obj) ||\n      isString(obj)) {\n    return true\n  }\n\n  if (!isPlainObject(obj) &&\n      !isArray(obj)) {\n    return false\n  }\n\n  for (var key in obj) {\n    if (!isSerializable(obj[key])) {\n      return false\n    }\n  }\n\n  return true\n}\n"]}